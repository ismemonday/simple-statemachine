import java.security.MessageDigest

plugins {
    id 'java'
    id 'maven'
    id 'signing'
}

group 'io.github.ismemonday'
archivesBaseName = "simple-statemachine"
version '1.0.3'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

javadoc {
    options {
        // 设置源文件编码
        encoding 'utf-8'
        // 设置输出文档的字符集
        charSet 'utf-8'
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

test {
    useJUnitPlatform()
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                 deployment -> signing.signPom(deployment)
            }
            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(
                        userName: '${ossrhUsername}',
                        password: '${ossrhPassword}'
                )
            }
            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(
                        userName: '${ossrhUsername}',
                        password: '${ossrhPassword}'
                )
            }
            pom.project {
                name "${archivesBaseName}";
                packaging "jar"
                description "the simple fsm"
                url 'https://github.com/ismemonday/simple-statemachine'
                scm {
                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                    url 'https://github.com/ismemonday/simple-statemachine.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id "${archivesBaseName}"
                        name "maoguidong"
                        email "13732923389@163.com"
                    }
                }
            }.writeTo("$buildDir/libs/${archivesBaseName}-${version}.pom")
        }
    }
}

task createPom(type: Tar) {
    pom {
        project {
            name "${archivesBaseName}";
            packaging "jar"
            description "the simple fsm"
            url 'https://github.com/ismemonday/simple-statemachine'
            scm {
                connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
                developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
                url 'https://github.com/ismemonday/simple-statemachine.git'
            }

            licenses {
                license {
                    name 'The Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    id "${archivesBaseName}"
                    name "maoguidong"
                    email "13732923389@163.com"
                }
            }
        }
    }.writeTo("$buildDir/libs/${archivesBaseName}-${version}.pom")
}

artifacts {
    archives javadocJar, sourcesJar, new File("$buildDir/libs/${archivesBaseName}-${version}.pom")
}

signing {
    sign configurations.archives
}


task generateChecksums(type: Exec) {
    //dependsOn(signArchives)
    def libsDir = file("${project.buildDir}/libs")
    libsDir.listFiles().each { eachFile ->
        if (eachFile.isFile() && (eachFile.name.endsWith('.jar') || eachFile.name.endsWith('.pom'))) {
            file(eachFile.absolutePath + ".md5").write(calculateMD(eachFile, "MD5"));
            file(eachFile.absolutePath + ".sha1").write(calculateMD(eachFile, "SHA1"));
        }
    }
}


// 辅助方法：计算文件的MD5,或者SHA1
def calculateMD(file, algorithm) {
    MessageDigest md = MessageDigest.getInstance(algorithm)
    byte[] digest = md.digest(file.getBytes())
    return digest.encodeHex().toString()
}
